export const generateEspeciesContract = (data) => {
  return {
    existeAnimalInvolucrado: data.existeAnimalInvolucrado,
    idEspecie: data.idEspecie,
    idDenuncia: data.idDenuncia,
    idProcedimiento: data.idProcedimiento,
    idEspecieDinero: data.idEspecieDinero,
    clasificacion: data.clasificacion,
    ambitoEspecie: data.ambitoEspecie,
    nue: data.nue,
    familiaEspecie: data.familiaEspecie,
    descripcion: data.descripcion,
    unidadMedidaCuantitativa: data.unidadMedidaCuantitativa,
    cantidadEspecie: data.cantidadEspecie,
    pesoBruto: data.pesoBruto,
    perecible: data.perecible,
    perecibleIdNumeroSerie: data.perecibleIdNumeroSerie,
    estadoConservacionEnvase: data.estadoConservacionEnvase,
    tipoElemento: data.tipoElemento,
    especiePeligrosa: data.especiePeligrosa,
    idNivelPeligro: data.idNivelPeligro,
    esDigital: data.esDigital,
    especieDigital: data.esDigital,
    especieDigitalTipoEspecie: data.especieDigitalTipoEspecie,
    esDinero: data.esDinero,
    esEspecieGenerico: data.esEspecieGenerico,
    dinero: data.dineros,
    observacion: data.observacion,
    indicadorArma: data.indicadorArma,
    indicadorEvidencia: data.indicadorEvidencia,
    indicadorMedioUsadoCometerDelito: data.indicadorMedioUsadoCometerDelito,
    aQuienSeLeIncauto: data.aQuienSeLeIncauto,
    avaluoEstimado: data.avaluoEstimado,
    quienRealizaAvaluo: data.quienRealizaAvaluo,
    rutTenedorEspecie: data.rutTenedorEspecie,
    nombreTenedorEspecie: data.nombreTenedorEspecie,
    pronunciamientoFiscal: data.pronunciamientoFiscal,
    idTipoEspecie: data.idTipoEspecie,
    esVehiculo: data.esVehiculo,
    datoVehiculo: {
      idEspecieDinero: data.idEspecieDinero,
      informacionVehiculo: {
        tipoVehiculo: data.tipoVehiculo,
        patente: data.patente,
        marca: data.marca,
        modelo: data.modelo,
        color: data.color,
        vin: data.vin,
        numeroMotor: data.numeroMotor,
        tieneSeguro: data.tieneSeguro,
        estaEncargadoPorRobo: data.estaEncargadoPorRobo,
        numeroEncargo: data.numeroEncargo,
        informacionAutopista: data.informacionAutopista,
        informacionPeajes: data.informacionPeajes,
        tieneTag: data.tieneTag,
        clonado: data.clonado,
        portaPlacaPatente: data.portaPlacaPatente,
        puedeRodar: data.puedeRodar
      },
      tieneDocumentacionVehiculo: data.tieneDocumentacionVehiculo,
      estabaCerradoVehiculo: data.estabaCerradoVehiculo,
      signosFuerza: data.signosFuerza,
      estadoVehiculo: data.estadoVehiculo,
      herramientasAdentro: data.herramientasAdentro,
      lugarCustodia: data.lugarCustodia,
      tieneCamara: data.tieneCamara,
      accesoriosAdicionales: data.accesoriosAdicionales,
      tieneDispositivoGeolocalizacion: data.tieneDispositivoGeolocalizacion,
      latitudLongitudGeolocalizacion: {
        lat: data.lat,
        lon: data.lon
      },
      archivoGeolocalizacion: data.archivoGeolocalizacion,
      lugarEstacionaComunmente: data.lugarEstacionaComunmente
    },
    esDocumentoValor: data.esDocumentoValor,
    datoDocumentoValor: {
      idEspecieDinero: data.idEspecieDinero,
      tipoDocumento: data.tipoDocumento,
      numero: data.numero,
      serie: data.serie,
      institucion: data.institucion,
      tipoMoneda: data.tipoMoneda,
      fecha: data.fecha,
      valor: data.valor,
      observacion: data.observacionDocumento
    },
    datoAnimal: {
      idEspecieDinero: data.idEspecieDinero,
      tipoAnimal: data.tipoAnimal,
      razaAnimal: data.razaAnimal,
      edad: data.edad,
      peso: data.peso,
      chipNumeroIdentificatorio: data.chipNumeroIdentificatorio,
      numeroArete: data.numeroArete,
      bancoADNBobino: data.bancoADNBobino,
      marcaOreja: data.marcaOreja,
      color: data.colorAnimal,
      colorDeFrenteAnimal: data.colorDeFrenteAnimal,
      tipoTusa: data.tipoTusa,
      colorTusa: data.colorTusa,
      tipoCicatriz: data.tipoCicatriz,
      formaCicatriz: data.formaCicatriz,
      colorPatas: data.colorPatas,
      tipoHerradura: data.tipoHerradura,
      tipoCola: data.tipoCola,
      colorCola: data.colorCola,
      tipoSenal: data.tipoSenal,
      formaSenal: data.formaSenal,
      origenAnimal: data.origenAnimal,
      inscripcion: data.inscripcion,
      tipoDocumentacionAnimal: data.tipoDocumentacionAnimal,
      causaMuerteAnimal: data.causaMuerteAnimal,
      observaciones: data.observaciones,
      lugarCustodia: data.lugarCustodia
    },
    antecedentesForm: {
      tipoAntecedente: data.tipoAntecedente,
      nombreArchivo: data.nombreArchivo,
      descripcionArchivo: data.descripcionArchivo,
      tipoArchivo: data.tipoArchivo,
      extensionArchivo: data.extensionArchivo,
      tamanoArchivo: data.tamanoArchivo,
      ubicacionArchivo: data.ubicacionArchivo,
      origen: data.origen,
      formatoActual: data.formatoActual,
      relacionFront: data.relacionFront,
      version: data.version,
      fotografiasVideos: data.fotografiasVideos,
      idRelacion: data.idRelacion,
      idTipoRelacion: data.idTipoRelacion
    },
    relacionSujetoEspecie: {
      sujetos: data.sujetosEspecie,
      observaciones: data.observacionRelacionSujeto
    }
  }
}
export const populateEspecie = (contract, target) => {
  console.log(contract)
  const { datoAnimal, datoDocumentoValor, datoVehiculo } = contract

  const formData = {
    idEspecie: contract.idEspecie,
    idDenuncia: contract.idDenuncia,
    idProcedimiento: contract.idProcedimiento,
    idEspecieDinero: contract.idEspecieDinero,
    clasificacion: contract.clasificacion,
    ambitoEspecie: contract.ambitoEspecie,
    familiaEspecie: contract.familiaEspecie,
    idTipoEspecie: contract.idTipoEspecie,
    nue: contract.nue,
    rue: contract.rue,
    descripcion: contract.descripcion,
    unidadMedidaCuantitativa: contract.unidadMedidaCuantitativa,
    cantidadEspecie: contract.cantidadEspecie,
    pesoBruto: parseInt(contract.pesoBruto),
    perecibleIdNumeroSerie: contract.perecibleIdNumeroSerie,
    estadoConservacionEnvase: contract.estadoConservacionEnvase,
    tipoElemento: contract.tipoElemento,
    perecible: contract.perecible,
    especiePeligrosa: contract.especiePeligrosa,
    idNivelPeligro: contract.idNivelPeligro,
    esDigital: contract.esDigital,
    esDinero: !!contract.dinero?.length,
    dinero: contract.dinero,
    esEspecieGenerico: contract.esEspecieGenerico,
    especieDigital: contract.esDigital,
    especieDigitalTipoEspecie: contract.especieDigitalTipoEspecie,
    tipoAnimal: datoAnimal?.tipoAnimal,
    razaAnimal: datoAnimal?.razaAnimal,
    edad: datoAnimal?.edad,
    peso: datoAnimal?.peso,
    chipNumeroIdentificatorio: datoAnimal?.chipNumeroIdentificatorio,
    numeroArete: datoAnimal?.numeroArete,
    bancoADNBobino: datoAnimal?.bancoADNBobino,
    marcaOreja: datoAnimal?.marcaOreja,
    colorAnimal: datoAnimal?.color,
    colorDeFrenteAnimal: datoAnimal?.colorDeFrenteAnimal,
    tipoTusa: datoAnimal?.tipoTusa,
    colorTusa: datoAnimal?.colorTusa,
    tipoCicatriz: datoAnimal?.tipoCicatriz,
    formaCicatriz: datoAnimal?.formaCicatriz,
    tipoHerradura: datoAnimal?.tipoHerradura,
    tipoCola: datoAnimal?.tipoCola,
    colorCola: datoAnimal?.colorCola,
    tipoSenal: datoAnimal?.tipoSenal,
    formaSenal: datoAnimal?.formaSenal,
    origenAnimal: datoAnimal?.origenAnimal,
    inscripcion: datoAnimal?.inscripcion,
    tipoDocumentacionAnimal: datoAnimal?.tipoDocumentacionAnimal,
    causaMuerteAnimal: datoAnimal?.causaMuerteAnimal,
    observaciones: datoAnimal?.observaciones,
    lugarCustodia: datoAnimal?.lugarCustodia,
    esDocumentoValor: contract.esDocumentoValor,
    tipoDocumento: datoDocumentoValor?.tipoDocumento,
    numero: parseInt(datoDocumentoValor?.numero),
    serie: datoDocumentoValor?.serie,
    institucion: datoDocumentoValor?.institucion,
    fecha: datoDocumentoValor?.fecha,
    valor: parseInt(datoDocumentoValor?.valor),
    observacionDocumento: datoDocumentoValor?.observacionDocumento,
    esVehiculo: contract.esVehiculo,
    tieneDocumentacionVehiculo: datoVehiculo?.tieneDocumentacionVehiculo,
    estabaCerradoVehiculo: datoVehiculo?.estabaCerradoVehiculo,
    signosFuerza: datoVehiculo?.signosFuerza,
    estadoVehiculo: datoVehiculo?.estadoVehiculo,
    herramientasAdentro: datoVehiculo?.herramientasAdentro,
    tieneCamara: datoVehiculo?.tieneCamara,
    accesoriosAdicionales: datoVehiculo?.accesoriosAdicionales,
    tieneDispositivoGeolocalizacion: datoVehiculo?.tieneDispositivoGeolocalizacion,
    archivoGeolocalizacion: datoVehiculo?.archivoGeolocalizacion,
    lugarEstacionaComunmente: datoVehiculo?.lugarEstacionaComunmente,
    tipoVehiculo: datoVehiculo?.informacionVehiculo?.tipoVehiculo,
    patente: datoVehiculo?.informacionVehiculo?.patente,
    marca: datoVehiculo?.informacionVehiculo?.marca,
    modelo: datoVehiculo?.informacionVehiculo?.modelo,
    color: datoVehiculo?.informacionVehiculo?.color,
    vin: datoVehiculo?.informacionVehiculo?.vin,
    numeroMotor: datoVehiculo?.informacionVehiculo?.numeroMotor,
    tieneSeguro: datoVehiculo?.informacionVehiculo?.tieneSeguro,
    estaEncargadoPorRobo: datoVehiculo?.informacionVehiculo?.estaEncargadoPorRobo,
    numeroEncargo: datoVehiculo?.informacionVehiculo?.numeroEncargo,
    informacionAutopista: datoVehiculo?.informacionVehiculo?.informacionAutopista,
    informacionPeajes: datoVehiculo?.informacionVehiculo?.informacionPeajes,
    tieneTag: datoVehiculo?.informacionVehiculo?.tieneTag,
    clonado: datoVehiculo?.informacionVehiculo?.clonado,
    portaPlacaPatente: datoVehiculo?.informacionVehiculo?.portaPlacaPatente,
    puedeRodar: datoVehiculo?.informacionVehiculo?.puedeRodar,
    lat: datoVehiculo?.latitudLongitudGeolocalizacion?.lat,
    lon: datoVehiculo?.latitudLongitudGeolocalizacion?.lon,
    observacion: contract.observacion,
    indicadorArma: contract.indicadorArma,
    indicadorEvidencia: contract.indicadorEvidencia,
    indicadorMedioUsadoCometerDelito: contract.indicadorMedioUsadoCometerDelito,
    avaluoEstimado: parseInt(contract.avaluoEstimado),
    quienRealizaAvaluo: contract.quienRealizaAvaluo,
    rutTenedorEspecie: contract.rutTenedorEspecie,
    nombreTenedorEspecie: contract.nombreTenedorEspecie,
    pronunciamientoFiscal: contract.pronunciamientoFiscal,
    tipoAntecedente: contract.antecedentesForm?.tipoAntecedente,
    nombreArchivo: contract.antecedentesForm?.nombreArchivo,
    descripcionArchivo: contract.antecedentesForm?.descripcionArchivo,
    tipoArchivo: contract.antecedentesForm?.tipoArchivo,
    extensionArchivo: contract.antecedentesForm?.extensionArchivo,
    tamanoArchivo: contract.antecedentesForm?.tamanoArchivo,
    ubicacionArchivo: contract.antecedentesForm?.ubicacionArchivo,
    origen: contract.antecedentesForm?.origen,
    formatoActual: contract.antecedentesForm?.formatoActual,
    relacionFront: contract.antecedentesForm?.relacionFront,
    version: contract.antecedentesForm?.version,
    fotografiasVideos: contract.antecedentesForm?.fotografiasVideos,
    idRelacion: contract.antecedentesForm?.idRelacion,
    idTipoRelacion: contract.antecedentesForm?.idTipoRelacion,
    nombreArchivoVideoOFotografia: '',
    descArchivoVideoOFotografia: ''
  }

  Object.assign(target, formData)
  console.log({ target })
  console.log({ formData })
}
